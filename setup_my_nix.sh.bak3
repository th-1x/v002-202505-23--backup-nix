#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

# --- Configuration ---
NIXPKGS_BRANCH="nixos-unstable" # Or "nixos-24.05" for more stability
HM_STATE_VERSION="24.05"
HOME_MANAGER_RELEASE_TAG="release-${HM_STATE_VERSION}" # e.g., release-24.05

# --- Global variable to hold the username ---
CONFIGURED_USERNAME=""

# --- Helper Functions ---
log_info() { echo "INFO: $1" >&2; }
log_warn() { echo "WARN: $1" >&2; }
log_error() { echo "ERROR: $1" >&2; exit 1; }

# --- 0. Initial Nix Version Check ---
check_initial_nix_version() {
    log_info "NIX VERSION AT SCRIPT START: $(nix --version || echo 'Nix not found (this is okay if installing now)')"
}

# --- 1. Ensure Nix is Installed (Single-User) ---
ensure_nix_installed() {
    if command -v nix &>/dev/null; then
        log_info "Nix is already installed (version: $(nix --version)). Skipping Nix installation."
        NIX_PROFILE_SCRIPT_PATHS=(
            "$HOME/.nix-profile/etc/profile.d/nix-daemon.sh"
            "$HOME/.local/state/nix/profile/etc/profile.d/nix-daemon.sh"
            "$HOME/.nix-profile/etc/profile.d/nix.sh"
            "/etc/profile.d/nix.sh"
        )
        SOURCED_NIX=false
        for NIX_PROFILE_SCRIPT in "${NIX_PROFILE_SCRIPT_PATHS[@]}"; do
            if [ -f "$NIX_PROFILE_SCRIPT" ]; then
                log_info "Sourcing existing Nix profile script: $NIX_PROFILE_SCRIPT"
                # shellcheck source=/dev/null
                . "$NIX_PROFILE_SCRIPT"; SOURCED_NIX=true; break
            fi
        done
        if [ "$SOURCED_NIX" = false ]; then
             log_warn "Could not find a standard Nix profile script to source for the current session. Nix commands might not be available if PATH is not already set."
        fi
        return
    fi

    log_info "Nix not found. Attempting single-user Nix installation."
    echo "--------------------------------------------------------------------------------" >&2
    echo "Nix works best if its store is at /nix. This requires creating /nix and" >&2
    echo "giving your user ownership *once* using sudo:" >&2
    echo "  sudo mkdir -m 0755 /nix" >&2
    echo "  sudo chown $(whoami) /nix" >&2
    echo "--------------------------------------------------------------------------------" >&2
    read -rp "Do you want to attempt creating /nix with sudo (recommended, one-time)? [y/N]: " choice
    if [[ "$choice" == "Y" || "$choice" == "y" ]]; then
        log_info "Attempting to create and chown /nix for user $(whoami)."
        if sudo mkdir -m 0755 /nix && sudo chown "$(whoami)" /nix; then
            log_info "/nix directory created and ownership set."
        else
            log_warn "/nix directory creation/chown failed. Nix installer will likely use ~/.nix or ~/.local/state/nix."
        fi
    else
        log_info "Skipping sudo /nix creation. Nix installer will choose the path."
    fi

    log_info "Starting Nix single-user installer (using --no-daemon)..."
    curl -L https://nixos.org/nix/install | sh -s -- --no-daemon

    log_info "Nix installation script finished."
    echo "IMPORTANT: The Nix installer should have modified your shell configuration file (e.g., ~/.bashrc, ~/.zshrc)." >&2
    echo "           You will need to RE-LOGIN or source it (e.g., 'source ~/.bashrc') in ALL new terminals for 'nix' to be found." >&2
    echo "           The installer usually suggests a line like: '. $HOME/.nix-profile/etc/profile.d/nix.sh' or '. $HOME/.nix-profile/etc/profile.d/nix-daemon.sh'" >&2
    echo "           Please ensure such a line is present and active in your shell's startup file." >&2

    echo "INFO: Sourcing Nix environment for the *current script session*..." >&2
    NIX_PROFILE_SCRIPT_NEW_INSTALLER_DAEMON="$HOME/.nix-profile/etc/profile.d/nix-daemon.sh"
    NIX_PROFILE_SCRIPT_NEW_INSTALLER_NO_NIX_DAEMON="$HOME/.local/state/nix/profile/etc/profile.d/nix-daemon.sh"
    NIX_PROFILE_SCRIPT_LEGACY="$HOME/.nix-profile/etc/profile.d/nix.sh" # From installer output

    SOURCED_NIX=false
    if [ -f "$NIX_PROFILE_SCRIPT_NEW_INSTALLER_DAEMON" ]; then
        # shellcheck source=/dev/null
        . "$NIX_PROFILE_SCRIPT_NEW_INSTALLER_DAEMON"; SOURCED_NIX=true
        log_info "Sourced Nix (daemon-style profile) for script: $NIX_PROFILE_SCRIPT_NEW_INSTALLER_DAEMON"
    elif [ -f "$NIX_PROFILE_SCRIPT_NEW_INSTALLER_NO_NIX_DAEMON" ]; then
        # shellcheck source=/dev/null
        . "$NIX_PROFILE_SCRIPT_NEW_INSTALLER_NO_NIX_DAEMON"; SOURCED_NIX=true
        log_info "Sourced Nix (daemon-style profile, no /nix dir) for script: $NIX_PROFILE_SCRIPT_NEW_INSTALLER_NO_NIX_DAEMON"
    elif [ -f "$NIX_PROFILE_SCRIPT_LEGACY" ]; then
        # shellcheck source=/dev/null
        . "$NIX_PROFILE_SCRIPT_LEGACY"; SOURCED_NIX=true
        log_info "Sourced Nix (legacy profile) for script: $NIX_PROFILE_SCRIPT_LEGACY"
    fi
    
    if [ "$SOURCED_NIX" = false ]; then
        log_error "Nix profile script not found after installation attempt for the current script session. A shell restart is DEFINITELY required before Nix commands work."
    fi

    if ! command -v nix &>/dev/null; then log_error "Nix command not found for script session even after attempting to source profile. A shell restart is likely required."; fi
    log_info "Nix successfully installed/sourced for this script (version: $(nix --version)). Persistence in new shells depends on your shell config."
}

# --- 2. Ensure Nix Flakes & New Command are Enabled (for future global use) ---
ensure_flakes_enabled() {
    log_info "Ensuring Nix experimental features (nix-command flakes) are enabled in ~/.config/nix/nix.conf for future sessions..."
    local NIX_CONF_DIR="$HOME/.config/nix"
    local NIX_CONF_PATH="$NIX_CONF_DIR/nix.conf"
    local DESIRED_FEATURE_NIX_COMMAND="experimental-features = nix-command"
    local DESIRED_FEATURE_FLAKES="experimental-features = flakes" 
    
    mkdir -p "$NIX_CONF_DIR"
    if [ -f "$NIX_CONF_PATH" ]; then
        sed -i '/^experimental-features\s*=/d' "$NIX_CONF_PATH"
    fi
    echo "$DESIRED_FEATURE_NIX_COMMAND" >> "$NIX_CONF_PATH"
    echo "$DESIRED_FEATURE_FLAKES" >> "$NIX_CONF_PATH"
    log_info "Set in $NIX_CONF_PATH: nix-command and flakes experimental features."

    log_info "Testing flake evaluation with 'nix eval --extra-experimental-features nix-command --extra-experimental-features flakes nixpkgs#hello'..."
    if nix eval --raw --extra-experimental-features nix-command --extra-experimental-features flakes nixpkgs#hello > /dev/null 2>&1; then
       log_info "Flakes/nix-command seem active for the current Nix client when flags are passed explicitly."
    else
       log_warn "Flake evaluation test failed even with explicit flags. This is unexpected."
    fi
}

# --- 3. Setup Home Manager Configuration ---
setup_home_manager_config() {
    log_info "DEBUG: Entering setup_home_manager_config."
    local DETECTED_USERNAME_RAW; DETECTED_USERNAME_RAW=$(whoami);
    local DETECTED_USERNAME; DETECTED_USERNAME=$(echo "$DETECTED_USERNAME_RAW" | tr -d '[:space:]\r\n');
    if [ -z "$DETECTED_USERNAME" ]; then log_error "FATAL: Sanitized DETECTED_USERNAME empty."; fi

    read -rp "Please enter your Ubuntu username (default: $DETECTED_USERNAME): " INPUT_USERNAME;
    if [ -z "$INPUT_USERNAME" ]; then CONFIGURED_USERNAME="$DETECTED_USERNAME";
    else CONFIGURED_USERNAME="$INPUT_USERNAME"; fi
    log_info "Using username: '$CONFIGURED_USERNAME'"

    if [ -z "$CONFIGURED_USERNAME" ]; then log_error "FATAL: CONFIGURED_USERNAME is empty."; fi

    local HM_CONFIG_DIR="$HOME/.config/home-manager"; mkdir -p "$HM_CONFIG_DIR"

    log_info "Creating Home Manager flake: '$HM_CONFIG_DIR/flake.nix' for user '$CONFIGURED_USERNAME'"
    cat <<EOF > "$HM_CONFIG_DIR/flake.nix"
{
  description = "Home Manager configuration for $CONFIGURED_USERNAME";
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/$NIXPKGS_BRANCH";
    home-manager = {
      url = "github:nix-community/home-manager/$HOME_MANAGER_RELEASE_TAG";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };
  outputs = { self, nixpkgs, home-manager, ... }@inputs:
  let system = "x86_64-linux";
  in {
    homeConfigurations."$CONFIGURED_USERNAME" = home-manager.lib.homeManagerConfiguration {
      pkgs = nixpkgs.legacyPackages.\${system};
      extraSpecialArgs = { inherit system; USERNAME = "$CONFIGURED_USERNAME"; };
      modules = [ ./home.nix ];
    };
  };
}
EOF

    log_info "Creating Home Manager home.nix: '$HM_CONFIG_DIR/home.nix' for user '$CONFIGURED_USERNAME'"
    cat <<EOF > "$HM_CONFIG_DIR/home.nix"
{ config, pkgs, lib, USERNAME, ... }:
{
  home.username = USERNAME;
  home.homeDirectory = "/home/\${USERNAME}";
  home.stateVersion = "$HM_STATE_VERSION";
  programs.home-manager.enable = true;
  nix = {
    package = pkgs.nix;
    settings = {
      show-trace = true;
      # experimental-features = "nix-command flakes"; # Managed by ~/.config/nix/nix.conf for now
    };
  };
  home.packages = with pkgs; [ php composer nnn ];
  programs.bash.enable = true;
}
EOF
    log_info "Home Manager config files created in '$HM_CONFIG_DIR'"
}

# --- 4. Apply Home Manager Configuration ---
apply_home_manager_config() {
    log_info "NIX VERSION IN APPLY_HOME_MANAGER (initial check): $(nix --version || echo 'Nix cmd not found in apply_home_manager_config function start')"
    if [ -z "$CONFIGURED_USERNAME" ]; then log_error "Username not set. Cannot apply Home Manager configuration."; return 1; fi

    local HM_CONFIG_DIR_ABS="$HOME/.config/home-manager"
    local FLAKE_TARGET="${HM_CONFIG_DIR_ABS}#${CONFIGURED_USERNAME}"

    local NIX_EXECUTABLE
    if command -v nix &>/dev/null; then
        NIX_EXECUTABLE=$(command -v nix)
        log_info "Using Nix executable found in PATH for apply_home_manager_config: $NIX_EXECUTABLE"
    elif [ -x "$HOME/.nix-profile/bin/nix" ]; then
        NIX_EXECUTABLE="$HOME/.nix-profile/bin/nix"
        log_warn "Nix command not found in PATH within apply_home_manager_config, using direct path: $NIX_EXECUTABLE"
    else
        log_error "Nix executable not found by any means. Cannot proceed with Home Manager application."
        return 1
    fi
    
    log_info "NIX VERSION VIA RESOLVED EXECUTABLE ($NIX_EXECUTABLE) in apply_home_manager_config: $($NIX_EXECUTABLE --version || echo 'Failed to get version from direct path')"

    log_info "Attempting to apply Home Manager config for user '$CONFIGURED_USERNAME' using flake target '$FLAKE_TARGET'."
    echo "This might take a while, especially on the first run..." >&2

    local temp_nix_config_content="experimental-features = nix-command flakes"

    if ! NIX_CONFIG="$temp_nix_config_content" \
        "$NIX_EXECUTABLE" \
        --extra-experimental-features nix-command \
        --extra-experimental-features flakes \
        run "github:nix-community/home-manager/${HOME_MANAGER_RELEASE_TAG}" \
        -- \
        switch --flake "$FLAKE_TARGET" --show-trace; then
        log_warn "Initial '$NIX_EXECUTABLE run home-manager ... switch' command failed."
        return 1
    fi
    log_info "Home Manager configuration applied successfully."
} # THIS WAS THE LIKELY CULPRIT IF A BRACE WAS MISSING BEFORE.

# --- Main Script Execution ---
main() {
    check_initial_nix_version
    ensure_nix_installed 
    ensure_flakes_enabled 
    
    if ! setup_home_manager_config; then
        log_error "Failed to setup Home Manager configuration files. Aborting."
    fi
    
    log_info "DEBUG: Back in main, global CONFIGURED_USERNAME is '$CONFIGURED_USERNAME'"
    if [ -z "$CONFIGURED_USERNAME" ]; then
        log_error "CRITICAL: Username was not configured. Cannot proceed."
    fi

    if ! apply_home_manager_config; then
        log_warn "Home Manager application reported an issue. See messages above."
        echo "" >&2
        echo "--------------------------------------------------------------------------------" >&2
        echo "🔴 Home Manager switch FAILED within the script." >&2
        echo "" >&2
        echo "➡️ NEXT STEPS:" >&2
        echo "" >&2
        echo "1. FIX 'nix: command not found' (If you see this in a new terminal AFTER script attempted Nix install):" >&2
        echo "   The Nix installer should add a line to your shell's startup file." >&2
        echo "   - For bash, check '~/.bashrc'. For zsh, check '~/.zshrc' or '~/.zprofile'." >&2
        echo "   - Look for a line similar to:" >&2
        echo "       if [ -e \"\$HOME/.nix-profile/etc/profile.d/nix-daemon.sh\" ]; then . \"\$HOME/.nix-profile/etc/profile.d/nix-daemon.sh\"; fi" >&2
        echo "       OR (older style / specific installer output):" >&2
        echo "       . \"\$HOME/.nix-profile/etc/profile.d/nix.sh\"" >&2
        echo "   - If MISSING, ADD one of these lines to the END of your shell startup file (e.g., ~/.bashrc)." >&2
        echo "   - Then, CLOSE AND REOPEN YOUR TERMINAL or run 'source ~/.bashrc' (or equivalent)." >&2
        echo "   - Verify by typing: nix --version" >&2
        echo "" >&2
        echo "2. MANUALLY APPLY HOME MANAGER (Once 'nix --version' works in a new terminal):" >&2
        echo "   In a NEW terminal, run:" >&2
        echo "   home-manager switch --flake \"$HOME/.config/home-manager#$CONFIGURED_USERNAME\" --show-trace" >&2
        echo "" >&2
        echo "   (The '--extra-experimental-features' flags should be picked up from '$HOME/.config/nix/nix.conf' in a new shell session)." >&2
        echo "--------------------------------------------------------------------------------" >&2
        exit 1
    fi

    echo "" >&2; log_info "🎉 Script finished! Home Manager configuration applied. 🎉"; echo "" >&2
    echo "Packages (PHP, Composer, nnn) should be available after you OPEN A NEW TERMINAL or re-login." >&2
    echo "Verify by typing 'composer --version', 'php --version', 'nnn -V' in a new terminal." >&2
    echo "The file '$HOME/.config/nix/nix.conf' has been configured to enable flakes and nix-command globally for future Nix operations." >&2
}

# --- Run Main ---
main


